<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on dotNetting</title><link>https://dotnetting.net/tags/linux/</link><description>Recent content in Linux on dotNetting</description><generator>Hugo</generator><language>en-gb</language><lastBuildDate>Wed, 26 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://dotnetting.net/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>How to use Visual Studio without Docker Desktop to debug a .NET Core application running in a container inside WSL</title><link>https://dotnetting.net/2022/01/how-to-use-visual-studio-without-docker-desktop-to-debug-a-.net-core-application-running-in-a-container-inside-wsl/</link><pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate><guid>https://dotnetting.net/2022/01/how-to-use-visual-studio-without-docker-desktop-to-debug-a-.net-core-application-running-in-a-container-inside-wsl/</guid><description>This post provides a step-by-step guide to setting up a development environment that allows debugging .NET Core applications inside a Docker container running on &lt;strong>WSL&lt;/strong>, using Visual Studio, without relying on &lt;strong>Docker Desktop&lt;/strong>. It outlines the prerequisites, the process of installing and configuring Docker tools on WSL2, enabling SSH for remote debugging, and attaching Visual Studio to the running container for debugging. While this approach requires manual setup, it offers a cost-effective alternative to Docker Desktop for teams who prefer or need to avoid its licensing fees.</description></item></channel></rss>