<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>.net core on dotNetting</title><link>https://dotnetting.net/tags/.net-core/</link><description>Recent content in .net core on dotNetting</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 26 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://dotnetting.net/tags/.net-core/index.xml" rel="self" type="application/rss+xml"/><item><title>How to use Visual Studio without Docker Desktop to debug a .NET Core application running in a container inside WSL</title><link>https://dotnetting.net/2022/01/how-to-use-visual-studio-without-docker-desktop-to-debug-a-.net-core-application-running-in-a-container-inside-wsl/</link><pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate><guid>https://dotnetting.net/2022/01/how-to-use-visual-studio-without-docker-desktop-to-debug-a-.net-core-application-running-in-a-container-inside-wsl/</guid><description>As the grace period to use Docker Desktop for free is coming to an end, organisations are looking into alternatives to retain much of the convenience Docker Desktop offers, without incurring in the extra costs. One of that convenience is the seamless integration between Visual Studio 2022 (and some previous versions) and docker engine allowing to run and debug applications as naturally as if we were running and debugging them natively on the host.</description></item><item><title>Testing: Simulate database failures using EF Core Interceptors</title><link>https://dotnetting.net/2021/05/testing-simulate-database-failures-using-ef-core-interceptors/</link><pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate><guid>https://dotnetting.net/2021/05/testing-simulate-database-failures-using-ef-core-interceptors/</guid><description>One of the first things we learn about resiliency is that dependencies will fail at some point, and our applications must be prepared to deal gracefully with these failures. What gracefully means will vary from app to app, but in all cases, this graceful behaviour should be covered by some sort of tests. We have therefore to cover those failure scenarios to ensure our applications are resilient. In this post I will show you how to use Interceptors to simulate failures when using Entity Framework Core with relational databases like SQL Server.</description></item></channel></rss>