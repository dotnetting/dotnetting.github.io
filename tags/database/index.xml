<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>database on dotNetting</title><link>https://dotnetting.net/tags/database/</link><description>Recent content in database on dotNetting</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 06 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://dotnetting.net/tags/database/index.xml" rel="self" type="application/rss+xml"/><item><title>Testing: Simulate database failures using EF Core Interceptors</title><link>https://dotnetting.net/2021/05/testing-simulate-database-failures-using-ef-core-interceptors/</link><pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate><guid>https://dotnetting.net/2021/05/testing-simulate-database-failures-using-ef-core-interceptors/</guid><description>One of the first things we learn about resiliency is that dependencies will fail at some point, and our applications must be prepared to deal gracefully with these failures. What gracefully means will vary from app to app, but in all cases, this graceful behaviour should be covered by some sort of tests. We have therefore to cover those failure scenarios to ensure our applications are resilient. In this post I will show you how to use Interceptors to simulate failures when using Entity Framework Core with relational databases like SQL Server.</description></item></channel></rss>