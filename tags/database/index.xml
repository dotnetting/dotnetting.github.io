<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Database on dotNetting</title><link>https://dotnetting.net/tags/database/</link><description>Recent content in Database on dotNetting</description><generator>Hugo</generator><language>en-gb</language><lastBuildDate>Thu, 06 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://dotnetting.net/tags/database/index.xml" rel="self" type="application/rss+xml"/><item><title>Testing: Simulate database failures using EF Core Interceptors</title><link>https://dotnetting.net/2021/05/testing-simulate-database-failures-using-ef-core-interceptors/</link><pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate><guid>https://dotnetting.net/2021/05/testing-simulate-database-failures-using-ef-core-interceptors/</guid><description>The post explains how to use &lt;strong>EF Core Interceptors&lt;/strong> to simulate database failures, enabling tests for application resiliency. It introduces a custom &lt;code>MockFailCommandInterceptor&lt;/code> that selectively throws exceptions during specific database operations, such as &lt;code>INSERT&lt;/code>, to test failure scenarios. This approach ensures that failure handling is thoroughly tested.</description></item></channel></rss>