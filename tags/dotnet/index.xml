<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dotnet on dotNetting</title><link>https://dotnetting.net/tags/dotnet/</link><description>Recent content in Dotnet on dotNetting</description><generator>Hugo</generator><language>en-gb</language><lastBuildDate>Wed, 08 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://dotnetting.net/tags/dotnet/index.xml" rel="self" type="application/rss+xml"/><item><title>How to use task-coalescing in C# to stop doing wasteful work</title><link>https://dotnetting.net/2025/01/how-to-use-task-coalescing-in-c%23-to-stop-doing-wasteful-work/</link><pubDate>Wed, 08 Jan 2025 00:00:00 +0000</pubDate><guid>https://dotnetting.net/2025/01/how-to-use-task-coalescing-in-c%23-to-stop-doing-wasteful-work/</guid><description>The post discusses a common inefficiency in multithreaded applications where multiple tasks redundantly compute the same result, particularly in scenarios involving high-concurrency requests to remote servers. It introduces the task-coalescing technique, which ensures that only one task fetches the data while others reuse the result, reducing wasteful work. Using .NET&amp;rsquo;s &lt;code>Lazy&amp;lt;T&amp;gt;&lt;/code> and &lt;code>ConcurrentDictionary&amp;lt;TKey, TValue&amp;gt;&lt;/code>, the example implementation demonstrates how to achieve this efficiently, mitigating issues like &lt;strong>cache stampedes&lt;/strong> and improving performance with minimal code changes.</description></item><item><title>How to do logging in .NET AWS Lambda functions</title><link>https://dotnetting.net/2023/05/how-to-do-logging-in-.net-aws-lambda-functions/</link><pubDate>Thu, 25 May 2023 00:00:00 +0000</pubDate><guid>https://dotnetting.net/2023/05/how-to-do-logging-in-.net-aws-lambda-functions/</guid><description>The article outlines four ways to send logs to AWS Cloudwatch from a .NET Lambda function. It covers &lt;code>ILambdaContext.Logger&lt;/code>, a basic option for simple logging; &lt;code>LambdaILogger&lt;/code>, which integrates with Microsoft&amp;rsquo;s &lt;code>ILogger&lt;/code> for richer features but has limitations with parameter serialization; &lt;code>Serilog&lt;/code>, a highly customizable library for structured logging and control over log formats; and &lt;code>AWS Lambda Powertools&lt;/code>, a straightforward utility tailored for &lt;strong>AWS Lambda&lt;/strong> with built-in X-Ray trace correlation. The choice between these methods depends on the need for simplicity or advanced customization.</description></item></channel></rss>