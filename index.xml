<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dotNetting</title><link>https://dotnetting.net/</link><description>Recent content on dotNetting</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 06 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://dotnetting.net/index.xml" rel="self" type="application/rss+xml"/><item><title>Testing: Simulate database failures using EF Core Interceptors</title><link>https://dotnetting.net/2021/05/testing-simulate-database-failures-using-ef-core-interceptors/</link><pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate><guid>https://dotnetting.net/2021/05/testing-simulate-database-failures-using-ef-core-interceptors/</guid><description>One of the first things we learn about resiliency is that dependencies will fail at some point, and our applications must be prepared to deal graciously with these failures. What graciously means will vary from app to app, but in all cases, this gracious behaviour should be covered by some sort of tests. We have therefore to cover those failure scenarios to ensure our applications are resilient. In this post I will show you how to use Interceptors to simulate failures when using Entity Framework Core with relational databases like SQL Server.</description></item><item><title>How to route requests based on HTTP headers in ASP.NET Core</title><link>https://dotnetting.net/2021/04/how-to-route-requests-based-on-http-headers-in-asp.net-core/</link><pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate><guid>https://dotnetting.net/2021/04/how-to-route-requests-based-on-http-headers-in-asp.net-core/</guid><description>It is common for APIs to route requests based on a combination of HTTP verb (GET, POST, etc.) and path. For example, we can have same path /api/items/123 for both retrieving the information about item 123 and deleting item 123, using HTTP verbs GET and DELETE respectively. But what if we have the same verb and path and need to route the requests based on the value of a HTTP header?</description></item></channel></rss>